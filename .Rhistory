"RINGDNA__CREATED_BY_RINGDNA__C")
activities <- activities %>%
select(subset_cols)
#NUMBER OF LOGGED
loggedAct <- activities %>%
select("WHOID")
loggedAct <- as.data.frame(table(loggedAct))
loggedAct <- data.frame(loggedAct$loggedAct, loggedAct$Freq)
names(loggedAct) <- c("Id", "Num_Activities")
loggedAct$Id <- as.character(loggedAct$Id)
my_data$Id <- as.character(my_data$Id)
my_data <- left_join(my_data,loggedAct)
myrawdata <- my_data
my_data$"WHOID" <- NULL
my_data$"O2O_Status__c" <- NULL
my_data$"Hire_Records__c"<- NULL
my_data$"Possible_Job_Matches__c"<-NULL
my_data$"Id"<- NULL
my_data$"AccountId"<- NULL
my_data$"RecordTypeId"<- NULL
my_data$"LastModifiedById"<- NULL
my_data$"MailingState"<- NULL
my_data$"MailingPostalCode" <- NULL
my_data$"MailingCountry"<- NULL
my_data$"OwnerId"<- NULL
my_data$"CreatedDate"<- NULL
my_data$"CreatedById"<- NULL
my_data$"LastModifiedDate"<- NULL
my_data$"LastActivityDate"<- NULL
my_data$"Multiple_AVR__c" <- NULL
my_data$"Start_Date__c"<- NULL
my_data$"Additional_Service_Needs__c"<- NULL
my_data$"Last_Rank__c"<- NULL
my_data$"O2O_Partners_Previously_Applied_To__c"  <- NULL
my_data$"Active__c" <- NULL
my_data$"Send_Retention_Survey__c"<- NULL
my_data$"DD214__c"<- NULL
my_data$"Purple_Heart_Recipient__c"<- NULL
my_data$"Active_Color__c"<- NULL
my_data$"Desired_Job_Function__c"<- NULL
my_data$"Military_Occupation__c" <- NULL
my_data$"Submitted_for_Mentor__c"<- NULL
my_data$"VTS_Recommended_Seniority_Level__c" <- NULL
my_data$"Dat_Initial_Assessment_was_Completed__c"<- NULL
my_data$"Online_Training_Participant__c"<- NULL
my_data$"Donor__c"<- NULL
my_data$"Awards_and_Decorations_Earned__c" <- NULL
my_data$"Client__c"<- NULL
my_data$"Disability_Rating__c"<- NULL
my_data$"Client_Type__c"<- NULL
my_data$"Service_Branch__c" <- NULL
my_data$"Multiple_Hire_Review_Complete__c"<- NULL
my_data$"Federal_Hire__c"<- NULL
my_data$"Hired_with_EO_assistance__c"<- NULL
my_data$"Applied_to_hired_position_on_Job_Board__c" <- NULL
my_data$"Get_Start_Date__c" <- NULL
my_data$"Hiring_Account__c"<- NULL
my_data$"Service_Rank__c" <- NULL
my_data$"Staff_member_assigned_to_be_mentor__c" <- NULL
my_data$"Date_assigned_to_staff__c" <- NULL
my_data$"Date_Turned_Purple__c" <- NULL
my_data$"CODE_Release_on_File__c" <- NULL
my_data$"MyTrak_About_Me__c" <- NULL
my_data$"MyTrak_Military_Experience__c" <- NULL
my_data$"MyTrak_My_Goals__c" <- NULL
my_data$"Date_Resume_Completed__c"<- NULL
my_data$"Desired_City_of_Employment__c" <- NULL
my_data$"Confirmed_Hired_Date__c" <- NULL
my_data$"Position_Hired_For__c" <- NULL
my_data$"Job_Type__c" <- NULL
my_data$"Education_Summary__c" <- NULL
my_data$"Hired_but_still_active_and_looking__c"  <- NULL
my_data$"ringdna100__Email_Attempts__c"  <- NULL
my_data$"Date_turned_grey__c" <- NULL
my_data$"Date_turned_green__c" <- NULL
my_data$"Date_of_first_contact__c"  <- NULL
my_data$"Areas_of_Experience__c"  <- NULL
my_data$"Preferred_Method_of_Contact__c" <- NULL
my_data$"If_Security_Clearance_Yes_What_kind__c"  <- NULL
my_data$"Salary_Range__c" <- NULL
my_data$"Date_Turned_Blue__c" <- NULL
my_data$"Foreign_Service_Summary__c" <- NULL
my_data$"Workshop_Staff_Members__c" <- NULL
my_data$"Reason_Vet_Turned_Grey__c"<- NULL
my_data$"Volunteer_Services__c" <- NULL
my_data$"Desired_Geographic_Region_of_Employment__c"<- NULL
my_data$"Submitted_for_Hire__c" <- NULL
my_data$"Office_Manager_Approved__c" <- NULL
my_data$"Regional_Manager_Approved__c"<- NULL
my_data$"Hire_Heroes_USA_Confirmed_Hire__c" <- NULL
my_data$"Funding_Source__c"  <- NULL
my_data$"Desired_Industry_for_Employment__c" <- NULL
my_data$"Desired_Earnings_Type__c" <- NULL
my_data$"Send_Green_Survey__c" <- NULL
my_data$"RealZip__RealZip__c" <- NULL
my_data$"CreatedDate/Initial Date(Imputed)" <- NULL
my_data$"Days to Hire" <- NULL
my_data$"ringdna100__Call_Attempts__c" <- NULL
my_data$`Hired_in 180 days_flag` <- NULL
#my_data$'DaystoHire(Created-Hired)'<-NULL
colnames(my_data)[colnames(my_data) ==  'DaystoHire(Created-Hired)'] <- 'DaysToHire'
#Summing the missing values
#colSums(is.na(my_data))
#my_data$Race__c[is.na(my_data$Race__c)] <- "Prefer not to answer"
my_data$Num_Activities[is.na(my_data$Num_Activities)] <- 0
my_data$Resume_Complete_Duration[is.na(my_data$Resume_Complete_Duration)] <- 0
my_data$Initial_Assessment_Complete_Duration[is.na(my_data$Initial_Assessment_Complete_Duration)] <- 0
cols <- colnames(my_data)
my_data[cols] <- lapply(my_data[cols], factor)
#summary(my_data)
#colnames(my_data)
my_data$Num_Activities <- as.numeric(my_data$Num_Activities)
my_data$Initial_Assessment_Complete_Duration <- as.numeric(my_data$Initial_Assessment_Complete_Duration)
my_data$Resume_Complete_Duration <- as.numeric(my_data$Resume_Complete_Duration)
my_data <- my_data %>%
select("Hired/NotHired","Resume_Complete_Duration","Num_Activities","Initial_Assessment_Complete_Duration","Gender__c","Mileage_Willing_To_Commute__c","Responsive__c","O2O_Hire__c","Volunteer__c","O2O_Program_Participant__c","On_Job_Board__c","Program_Enrollments__c","Updated_Resume_Complete__c","HHUSA_Workshop_Participant__c","O2O_Initial_Assessment_Complete__c","Willing_to_relo_with_no_assistance__c","Created_LinkedIn_account__c","MyTrak_Employed_outside_military__c","MyTrak_Federal_Resume_Review__c","MyTrak_VTS_Assigned__c","MyTrak_Past_Jobs__c","Photo_on_File__c","Is_the_Initial_Intake_Assessment_done__c" ,"Resume_Tailoring_Tips__c","Internship__c","Foreign_Service__c","Reserves_National_Guard__c","Enrolled_in_School__c","Finalized_HHUSA_revised_resume_on_file__c","Documents_Received__c","Willing_to_Relocate__c","Used_Volunteer_Services__c","Used_Federal_Services__c","Interview_Skills__c","Highest_Level_of_Education_Completed__c","Status__c","Highest_Level_of_Education_Completed__c","Disability_percentage_60_or_above__c")
mice <- mice(my_data[,-c(1)],m=1,maxit=10,meth='pmm')
completedData <- complete(mice,1)
new_data <- cbind(completedData,my_data$`Hired/NotHired`)
colnames(new_data)[colnames(new_data) == 'my_data$`Hired/NotHired`'] <- 'Hired/NotHired'
set.seed(1234)
indexes = sample(1:nrow(new_data), size=0.7*nrow(new_data))
nrow(new_data) # Total number of records
data.train=new_data[indexes,]
data.test=new_data[-indexes,]
#nrow(data.train)
#nrow(data.test)
summary(data.train)
SampSize <- nrow(data.train[data.train$`Hired/NotHired` == "Hired",])
Hired <- data.train %>%
filter(data.train$`Hired/NotHired` == "Hired")
NotHired <- data.train %>%
filter(data.train$`Hired/NotHired` == "Not Hired")
Hired <- Hired[sample(nrow(Hired), SampSize), ]
NotHired <- NotHired[sample(nrow(NotHired), SampSize), ]
data.tr.smp <- rbind(Hired,NotHired)
train_data <- data.tr.smp
test_data <- data.test
#after train test division
outcomeName <- c('Hired/NotHired')
predictorsNames <- colnames(train_data)[colnames(train_data) != 'Hired/NotHired']
#GBM
# Accuracy : 0.8577  ,
gbmModel <- train(`Hired/NotHired`~., data=train_data, method='gbm')
objControl <- trainControl(method='cv', number=3, returnResamp='none', summaryFunction = twoClassSummary)
predicted_values <- predict(gbmModel, test_data)
confusionMatrix(predicted_values, test_data$'Hired/NotHired',
positive = levels(test_data$'Hired/NotHired')[1])
predicted_values <- predict(gbmModel, test_data,type= "prob")[,2]
pred <- prediction(predicted_values, test_data$'Hired/NotHired')
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
predicted_values <- predict(gbmModel, test_data)
confusionMatrix(predicted_values, test_data$'Hired/NotHired',
positive = levels(test_data$'Hired/NotHired')[1])
predicted_values <- predict(gbmModel, test_data,type= "prob")[,2]
pred <- prediction(predicted_values, test_data$'Hired/NotHired')
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
#GLMNET
attach(train_data)
objControl <- trainControl(method='cv', number=3, returnResamp='none')
GLMnet <- train(`Hired/NotHired`~., data=train_data, method='glmnet', trControl=objControl)
predicted_values <- predict(object=GLMnet, test_data[,predictorsNames])
confusionMatrix(predicted_values, test_data$'Hired/NotHired',
positive = levels(test_data$'Hired/NotHired')[1])
predicted_values <- predict(GLMnet, test_data,type= "prob")[,2]
pred <- prediction(predicted_values, test_data$'Hired/NotHired')
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
attach(train_data)
objControl <- trainControl(method='cv', number=3, returnResamp='none')
GLMnet <- train(`Hired/NotHired`~., data=train_data, method='glmnet', trControl=objControl)
predicted_values <- predict(object=GLMnet, test_data[,predictorsNames])
confusionMatrix(predicted_values, test_data$'Hired/NotHired',
positive = levels(test_data$'Hired/NotHired')[1])
predicted_values <- predict(GLMnet, test_data,type= "prob")[,2]
pred <- prediction(predicted_values, test_data$'Hired/NotHired')
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
mylogit <- glm(`Hired/NotHired` ~ ., data = data.tr.smp, family = "binomial")
summary(mylogit)
surv.data <- myrawdata %>% select (
"Hired/NotHired","Finalized_HHUSA_revised_resume_on_file__c","Status__c", "MyTrak_VTS_Assigned__c", "DaystoHire(Created-Hired)")
colnames(surv.data)[colnames(surv.data) ==  'Hired/NotHired'] <- 'Hired.Flag'
colnames(surv.data)[colnames(surv.data) ==  'DaystoHire(Created-Hired)'] <- 'DaysToHire'
colnames(surv.data)[colnames(surv.data) ==  'Finalized_HHUSA_revised_resume_on_file__c'] <- 'Resume_Created_Revised'
colnames(surv.data)[colnames(surv.data) ==  'MyTrak_VTS_Assigned__c'] <- 'Connected_To_Transition_Specialist'
mice <- mice(surv.data[,],m=1,maxit=5,meth='pmm')
comsurvData <- complete(mice,1)
comsurvData$Hired.Flag <- ifelse(surv.data$Hired.Flag =='Not Hired', 0, 1)
comsurvData$Finalized_HHUSA_revised_resume_on_file__c <- as.factor(comsurvData$Resume_Created_Revised)
comsurvData$Connected_To_Transition_Specialist <- as.factor(comsurvData$Connected_To_Transition_Specialist)
comsurvData$Status__c <- as.factor(comsurvData$Status__c)
summary(comsurvData)
#Limiting the max days days to hire in analysis to 1000
comsurvData <- comsurvData %>%
filter(Hired.Flag == "1") %>%
filter(DaysToHire < 1000)
suran0 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),
comsurvData$Hired.Flag)~1)
summary(suran0)
plot(suran0, xlab = "Time", ylab = "Survival Probability")
suranl <- survfit(Surv(as.numeric(comsurvData$DaysToHire),
comsurvData$Hired.Flag)~comsurvData$Resume_Created_Revised)
# Survival analysis for the field Resume_Created_Revised
summary(suranl)
ggplot(comsurvData, aes(time = DaysToHire,
status = Hired.Flag,
color = factor(Resume_Created_Revised))) + geom_km()
# Survival analysis for the field Connected_To_Transition_Specialist
suranl2 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),comsurvData$Hired.Flag)~comsurvData$Resume_Created_Revised)
summary(suranl2)
ggplot(comsurvData, aes(time = DaysToHire, status = Hired.Flag,
color = factor(Connected_To_Transition_Specialist))) + geom_km()
surv.data <- myrawdata %>% select (
"Hired/NotHired","Finalized_HHUSA_revised_resume_on_file__c","Status__c", "MyTrak_VTS_Assigned__c", "Resume_Tailoring_Tips__c","Interview_Skills__c", "DaystoHire(Created-Hired)")
colnames(surv.data)[colnames(surv.data) ==  'Hired/NotHired'] <- 'Hired.Flag'
colnames(surv.data)[colnames(surv.data) ==  'DaystoHire(Created-Hired)'] <- 'DaysToHire'
colnames(surv.data)[colnames(surv.data) ==  'Finalized_HHUSA_revised_resume_on_file__c'] <- 'Resume_Created_Revised'
colnames(surv.data)[colnames(surv.data) ==  'MyTrak_VTS_Assigned__c'] <- 'Connected_To_Transition_Specialist'
colnames(surv.data)[colnames(surv.data) ==  'Resume_Tailoring_Tips__c'] <- 'Resume_Tailoring_Tips'
colnames(surv.data)[colnames(surv.data) ==  'Interview_Skills__c'] <- 'Interview_Skills_Assistance'
mice <- mice(surv.data[,],m=1,maxit=5,meth='pmm')
comsurvData <- complete(mice,1)
comsurvData$Hired.Flag <- ifelse(surv.data$Hired.Flag =='Not Hired', 0, 1)
comsurvData$Finalized_HHUSA_revised_resume_on_file__c <- as.factor(comsurvData$Resume_Created_Revised)
comsurvData$Connected_To_Transition_Specialist <- as.factor(comsurvData$Connected_To_Transition_Specialist)
comsurvData$Status__c <- as.factor(comsurvData$Status__c)
summary(comsurvData)
#Limiting the max days days to hire in analysis to 1000
comsurvData <- comsurvData %>%
filter(Hired.Flag == "1") %>%
filter(DaysToHire < 1000)
suran0 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),
comsurvData$Hired.Flag)~1)
summary(suran0)
plot(suran0, xlab = "Time", ylab = "Survival Probability")
suranl1 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),
comsurvData$Hired.Flag)~comsurvData$Resume_Created_Revised)
# Survival analysis for the field Resume_Created_Revised
summary(suranl1)
ggplot(comsurvData, aes(time = DaysToHire,
status = Hired.Flag,
color = factor(Resume_Created_Revised))) + geom_km()
# Survival analysis for the field Connected_To_Transition_Specialist
suranl2 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),comsurvData$Hired.Flag)~comsurvData$Connected_To_Transition_Specialist)
summary(suranl2)
ggplot(comsurvData, aes(time = DaysToHire, status = Hired.Flag,
color = factor(Connected_To_Transition_Specialist))) + geom_km()
# Survival analysis for the field Resume_Tailoring_Tips
suranl3 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),comsurvData$Hired.Flag)~comsurvData$Resume_Tailoring_Tips)
summary(suranl3)
ggplot(comsurvData, aes(time = DaysToHire, status = Hired.Flag,
color = factor(Resume_Tailoring_Tips))) + geom_km()
# Survival analysis for the field Interview_Skills_Assistance
suranl4 <- survfit(Surv(as.numeric(comsurvData$DaysToHire),comsurvData$Hired.Flag)~comsurvData$Interview_Skills_Assistance)
summary(suranl4)
ggplot(comsurvData, aes(time = DaysToHire, status = Hired.Flag,
color = factor(Interview_Skills_Assistance))) + geom_km()
surv.data <- myrawdata %>% select (
"Hired/NotHired",
"Num_Activities",
"Resume_Tailoring_Tips__c",
"MyTrak_VTS_Assigned__c",
"Finalized_HHUSA_revised_resume_on_file__c",
"Resume_Complete_Duration",
"Responsive__c",
"Internship__c",
"MyTrak_Employed_outside_military__c",
"HHUSA_Workshop_Participant__c",
"MyTrak_Past_Jobs__c",
"Is_the_Initial_Intake_Assessment_done__c",
"Initial_Assessment_Complete_Duration",
"Interview_Skills__c",
"Created_LinkedIn_account__c",
"Documents_Received__c",
"Mileage_Willing_To_Commute__c",
"DaystoHire(Created-Hired)"
)
colnames(surv.data)[colnames(surv.data) ==  'Hired/NotHired'] <- 'Hired.Flag'
colnames(surv.data)[colnames(surv.data) ==  'DaystoHire(Created-Hired)'] <- 'DaysToHire'
colnames(surv.data)[colnames(surv.data) ==  'Finalized_HHUSA_revised_resume_on_file__c'] <- 'Resume_Created_Revised'
colnames(surv.data)[colnames(surv.data) ==  'MyTrak_VTS_Assigned__c'] <- 'Connected_To_Transition_Specialist'
mice <- mice(surv.data[,],m=1,maxit=5,meth='pmm')
comsurvData <- complete(mice,1)
comsurvData$Hired.Flag <- ifelse(surv.data$Hired.Flag =='Not Hired', 0, 1)
comsurvData$Finalized_HHUSA_revised_resume_on_file__c <- as.factor(comsurvData$Resume_Created_Revised)
comsurvData$Connected_To_Transition_Specialist <- as.factor(comsurvData$Connected_To_Transition_Specialist)
comsurvData$Resume_Tailoring_Tips__c <- as.factor(comsurvData$Resume_Tailoring_Tips__c)
comsurvData$Resume_Created_Revised <- as.factor(comsurvData$Resume_Created_Revised)
comsurvData$Responsive__c <- as.factor(comsurvData$Responsive__c)
comsurvData$Internship__c <- as.factor(comsurvData$Internship__c)
comsurvData$MyTrak_Employed_outside_military__c <- as.factor(comsurvData$MyTrak_Employed_outside_military__c)
comsurvData$HHUSA_Workshop_Participant__c <- as.factor(comsurvData$HHUSA_Workshop_Participant__c)
comsurvData$MyTrak_Past_Jobs__c <- as.factor(comsurvData$MyTrak_Past_Jobs__c)
comsurvData$Is_the_Initial_Intake_Assessment_done__c <- as.factor(comsurvData$Is_the_Initial_Intake_Assessment_done__c)
comsurvData$Interview_Skills__c <- as.factor(comsurvData$Interview_Skills__c)
comsurvData$Created_LinkedIn_account__c <- as.factor(comsurvData$Created_LinkedIn_account__c)
comsurvData$Documents_Received__c <- as.factor(comsurvData$Documents_Received__c)
summary(comsurvData)
coxcols <- cbind(
"Num_Activities",
"Resume_Tailoring_Tips__c",
"Connected_To_Transition_Specialist",
"Resume_Created_Revised",
# "Resume_Complete_Duration",
"Responsive__c",
"Internship__c",
"MyTrak_Employed_outside_military__c",
"HHUSA_Workshop_Participant__c",
"MyTrak_Past_Jobs__c",
"Is_the_Initial_Intake_Assessment_done__c",
"Initial_Assessment_Complete_Duration",
"Interview_Skills__c",
"Created_LinkedIn_account__c",
"Documents_Received__c"
# "Mileage_Willing_To_Commute__c"
)
coxph <- coxph(Surv(as.numeric(comsurvData$DaysToHire),comsurvData$Hired.Flag)~Num_Activities, method="breslow")
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Volumes/GoogleDrive/My Drive/DSBA 6211 ABA/Assignment_01")
# Import data:
data <- read.csv("election_campaign_data.csv", sep=",", header=T, strip.white = T, na.strings = c("NA","NaN","","?"))
data$cand_id <- NULL
data$last_name <- NULL
data$first_name <- NULL
data$twitterbirth <- NULL
data$facebookdate <- NULL
data$facebookjan <- NULL
data$youtubebirth <- NULL
summary(data)
data$twitter <- as.factor(data$twitter)
data$facebook <- as.factor(data$facebook)
data$youtube <- as.factor(data$youtube)
data$cand_ici <- as.factor(data$cand_ici)
data$gen_election <- as.factor(data$gen_election)
summary(data)
nrow(data) # Before removing incomplete records
data <- data[complete.cases(data),]
nrow(data) # After removing incomplete records
set.seed(1234)
indexes = sample(1:nrow(data), size=0.7*nrow(data))
nrow(data) # Total number of records
data.train=data[indexes,]
nrow(data.train) # Number of records in train
data.test=data[-indexes,]
nrow(data.test) # Number of records in test
library(randomForest)
set.seed(1234)
rf10 <-randomForest(gen_election~., data=data.train, ntree=10, na.action=na.exclude, importance=T,
proximity=T)
print(rf10)
set.seed(1234)
rf20 <-randomForest(gen_election~., data=data.train, ntree=20, na.action=na.exclude, importance=T,
proximity=T)
print(rf20)
set.seed(1234)
rf30 <-randomForest(gen_election~., data=data.train, ntree=30, na.action=na.exclude, importance=T,
proximity=T)
print(rf30)
set.seed(1234)
rf40 <-randomForest(gen_election~., data=data.train, ntree=40, na.action=na.exclude, importance=T,
proximity=T)
print(rf40)
rf50 <-randomForest(gen_election~., data=data.train, ntree=50, na.action=na.exclude, importance=T,
proximity=T)
print(rf50)
rf60 <-randomForest(gen_election~., data=data.train, ntree=60, na.action=na.exclude, importance=T,
proximity=T)
print(rf60)
rf70 <-randomForest(gen_election~., data=data.train, ntree=70, na.action=na.exclude, importance=T,
proximity=T)
print(rf70)
rf80 <-randomForest(gen_election~., data=data.train, ntree=80, na.action=na.exclude, importance=T,
proximity=T)
print(rf80)
rf90 <-randomForest(gen_election~., data=data.train, ntree=90, na.action=na.exclude, importance=T,
proximity=T)
print(rf90)
rf100 <-randomForest(gen_election~., data=data.train, ntree=100, na.action=na.exclude, importance=T,
proximity=T)
print(rf100)
set.seed(1234)
best.mtry <- tuneRF(data.train[-26], data.train$gen_election, ntreeTry=70,  stepFactor=1.5, improve=0.01, trace=TRUE, plot=TRUE, na.action=na.exclude)
mtry
set.seed(1234)
best.mtry <- tuneRF(data.train[-26], data.train$gen_election, ntreeTry=70,  stepFactor=1.5, improve=0.01, trace=TRUE, plot=TRUE, na.action=na.exclude)
best.mtry
set.seed(1234)
rf <-randomForest(gen_election~., data=data.train, ntree=70, mtry=best.mtry, na.action=na.exclude, importance=T,
proximity=T)
print(rf)
library(caret)
predicted_values <- predict(rf, data.test) # Use the classifier to make the predictions. With the package that we used, type "raw" will give us the probabilities
head(predicted_values)
confusionMatrix(predicted_values, data.test$gen_election, positive = levels(data.test$gen_election)[2])
library(ROCR)
library(ggplot2)
predicted_values <- predict(rf, data.test, type = "prob")[,2]
head(predicted_values)
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
library(ROCR)
library(ggplot2)
predicted_values <- predict(rf, data.test, type = "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(data.test$salary.class)[2]
pred <- prediction(predicted_values, data.test$gen_election)
predicted_values <- predict(rf, data.test,type= "prob")[,2]
pred <- prediction(predicted_values, data.test$gen_election)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
library(ROCR)
library(ggplot2)
predicted_values <- predict(rf, data.test,type= "prob")[,2]
pred <- prediction(predicted_values, data.test$gen_election)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
#Evaluate variable importance
importance(rf)
varImpPlot(rf)
library(nnet)
ann <- nnet(gen_election ~ ., data=data.train, size=5, maxit=1000) # Size is the number of units (nodes) in the hidden layer.
summary(ann)
predicted_ann <- predict(ann, data.test)
head(predicted_ann)
threshold <- 0.5
pred <- factor( ifelse(predicted_ann[,1] > threshold, "W", "L") )
head(pred)
confusionMatrix(pred, data.test$gen_election, positive = levels(data.test$gen_election)[2])
library(ROCR)
library(ggplot2)
predicted_values <- predict(ann, data.test,type = "raw")
pred <- prediction(predicted_values, data.test$gen_election)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
i=6
while(i>5){
ann <- nnet(gen_election ~ ., data=data.train, size=i, maxit=1000)
i=i+1
}
i
ann <- nnet(gen_election ~ ., data=data.train, size=24, maxit=1000)
library(ROCR)
library(ggplot2)
predicted_values <- predict(ann, data.test,type = "raw")
pred <- prediction(predicted_values, data.test$gen_election)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
ftable(xtabs(~facebook+gen_election, data=data))
ftable(xtabs(~twitter+gen_election, data=data))
ftable(xtabs(~youtube+gen_election, data=data))
